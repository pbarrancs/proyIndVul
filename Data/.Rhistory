rm(list = ls())
library(datasets)
library(ggplot2)
data(airquality)
force(airquality)
source('~/.active-rstudio-document', echo=TRUE)
View(airquality)
p <- ggplot(df, aes(x=Desem, y=In_inf)) +
geom_boxplot()
p <- ggplot(df.3, aes(x=Desem, y=In_inf)) +
geom_boxplot()
df<- read.csv("BD.csv")
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,10,11,12,13,14)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,10,11,12,13,14)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,10,c("Bajo","Mediano","Alto"))
P_Medico <- categcolum(df,12,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem,P_Medico)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=In_inf)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
p <- ggplot(df.3, aes(x=Desem, y=Camas)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
View(df)
View(df)
View(df)
df<-df[,5:17] / df[,3]
df<- read.csv("BD.csv")
df<-df[,5:14] / df[,3]
df<- read.csv("BD.csv")
df<- read.csv("BD.csv")
df<-df[,5:14] / df[,3]
df<-df[,5:13] / df[,3]
df<- read.csv("BD.csv")
View(df)
#df<-df[,5:13] / df[,3]
df.1<-df[,-c(1,3,4)]
View(df.1)
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,10,11,12,13)], df.1[1])
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem,P_Medico)
df<- read.csv("BD.csv")
df<-df[,5:13] / df[,3]
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
View(df.3)
df<- read.csv("BD.csv")
df<-df[,5:13] / df[,3]
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
df<- read.csv("BD.csv")
df<-df[,5:13] / df[,3]
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
View(df.1)
df<- read.csv("BD.csv")
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem,P_Medico)
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
View(df)
df<- read.csv("BD.csv")
df<-df[5,12]/df[,3]
df.1<-df[,-c(1,3,4)]
df<-df[,5:12]/df[,3]
df<- read.csv("BD.csv")
df<-df[,5:12]/df[,3]
df<- read.csv("BD.csv")
df[,5:12]<-df[,5:12]/df[,3]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
View(df.3)
View(df.2)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
View(df.2)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
gbeeswarm
install.packages("ggbeeswarm")
library(ggbeeswarm)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
View(df.3)
View(df)
df<- read.csv("BD.csv")
df[,5:12]<-df[,5:12]/df[,3]
df.1<-df[,-c(1,3,4)]
df<- read.csv("BD.csv")
View(df)
df<- read.csv("BD.csv")
df[,5:12]<-df[,5:13]/df[,3]
df.1<-df[,-c(1,3,4)]
df[,5:13]<-df[,5:13]/df[,3]
df.1<-df[,-c(1,3,4)]
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
library(ggbeeswarm)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
df[,13]<-df[,13]*1000
View(df)
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
library(GGally)
library(tidyverse)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
library(ggbeeswarm)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
View(df)
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
library(ggbeeswarm)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
library(ggbeeswarm)
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
View(df)
View(df.1)
View(df)
View(df.1)
View(df.2)
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = pob)) +
geom_point(alpha=0.7)
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = Pob)) +
geom_point(alpha=0.7)
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = Pob, fill=Alc)) +
geom_point(alpha=0.7)
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = Pob, col=Alc)) +
geom_point(alpha=0.7)
library(dplyr)
ggplot(df, aes(x=Remuneracion, y=esp_vida, size = Pob, col=Alc)) +
geom_point(alpha=0.7)
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = Pob, col=Alc)) +
geom_point(alpha=0.7)
library(GGally)
library(GGally)
devtools::install_github("rstudio/packrat")
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
suppressWarnings({ df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))})
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
library(GGally)
library(tidyverse)
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000
df.1<-df[,-c(1,3,4)]
library(corrplot)
corrplot(cor(df.1[-1], method = "pearson"), type = "upper", method = "circle")
library(mctest)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
library(GGally)
library(ggplot2)
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
View(df)
library(ggplot2)
library(factoextra)
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df[,13] <- df[,13]*1000 #miles de pesos
df <- df[,c(8,11:16)]
names(df) <- c("X1","X2","X3","X4","X5","X6","X7")
head(df)
#solo para comparar
z <- princomp(df,cor = T)
summary(z, loadings=T)
(R <- round(cor(df),3))
eig <- eigen(R)
(y <- round(eig$vectors,3)) #lo multiplicamos por -1 simplemente por practicidad
aport_var <- function(l)
{
lsum <- sum(l)
l/lsum
}
var <- aport_var(eig$values)
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
fviz_screeplot(z)
library(ggplot2)
library(factoextra)
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df[,13] <- df[,13]*1000 #miles de pesos
df <- df[,c(8,11:16)]
names(df) <- c("X1","X2","X3","X4","X5","X6","X7")
head(df)
#solo para comparar
z <- princomp(df,cor = T)
summary(z, loadings=T)
View(df.1)
ggcorr(df.1[-1], label = T)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('GGally', 'tidyverse', 'mctest', 'ggplot2', 'ggbeeswarm','dplyr')
lapply(libs, instalar)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('GGally', 'tidyverse', 'mctest', 'ggplot2', 'ggbeeswarm','dplyr')
lapply(libs, instalar)
df<- read.csv("BD.csv")
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000
df.1<-df[,-c(1,3,4)]
ggcorr(df.1[-1], label = T)
omcdiag(df.1[c(5,8,9,10,11,12,13)], df.1[1])
df.2<- cbind(df[1],df.1[c(5,8,9,10,11,12,13)])
categcolum <- function(daf,col,names)
{
v <- as.numeric(scale(daf[,col]))
n <- length(names)
dim <- length(v)
part <- 1/n
r <- c()
for (i in 1:dim)
{
if(v[i] <= -1)
r[i] <- names[1]
else
if(v[i] <= 1)
r[i] <- names[2]
else
r[i] <- names[3]
}
return(r)
}
#Construccion de df.3, es decir df.2 + varibles categoricas
Desem <- categcolum(df,9,c("Bajo","Mediano","Alto"))
#P_Medico <- categcolum(df,11,c("Bajo","Mediano","Alto"))
df.3 <- cbind(df.2,Desem)
df.3 %>% ggpairs(columns = c(2:8),upper = list(continuous = wrap('cor',size = 2)),  mapping = aes(color = Desem))
p <- ggplot(df.3, aes(x=Desem, y=Remuneracion)) +
geom_boxplot()
p+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.3,aes(Desem, esp_vida)) + geom_quasirandom()
library(dplyr)
ggplot(df, aes(x=Desem, y=esp_vida, size = Pob, col=Alc)) +
geom_point(alpha=0.7)
ggplot(df, aes(x=Remuneracion, y=esp_vida, size = Pob, col=Alc)) +
geom_point(alpha=0.7)
View(df)
View(df.2)
plot_ly(x=C_alim, y=C_sal, z=C_ser, type="scatter3d", mode="markers", color=temp)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('GGally', 'tidyverse', 'mctest', 'ggplot2', 'ggbeeswarm','dplyr', 'plotly')
lapply(libs, instalar)
plot_ly(x=C_alim, y=C_sal, z=C_ser, type="scatter3d", mode="markers", color=temp)
plot_ly(x=df$C_alim, y=df$C_sal, z=df$C_ser, type="scatter3d", mode="markers", color=temp)
plot_ly(x=df$C_alim, y=df$C_sal, z=df$C_ser, type="scatter3d", mode="markers", color=df$C_alim)
View(df)
