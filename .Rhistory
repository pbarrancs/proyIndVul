ggplot(df.1, aes(df.1$Desem, df$esp_vida, color=df.1$Desem)) + geom_quasirandom(dodge.width=1)
indice <- function(df,vec){
n = length(df[,1])
ind = c()
for ( i in 1:n){
ind[i] = vec[1]*df[i,1] + vec[2]*df[i,2] + vec[3]*df[i,3] + vec[4]*df[i,4] +vec[5]*df[i,5] + vec[6]*df[i,6]
}
return(ind)
}
scores <- eig$vectors[,1]
ind <- indice(df,scores)
(ind <- round(100/as.numeric(ind),3))
inq <- df*scores
inq <- df %*% scores
m <- as.matrix(df)
#inq <- df %*% scores
m <- as.matrix(df)
#inq <- df %*% scores
m
m <- as.matrix(df[-1,])
#inq <- df %*% scores
m
m <- as.matrix(df[,-1])
#inq <- df %*% scores
m
m <- as.matrix(df[,-1])
inq <- m %*% scores
m <- as.matrix(df[,-1])
inq <- m %*% t(scores)
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
class(m)
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
m
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
len(m)
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
lenght(m)
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
length(m)
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
length(m[0])
m <- as.matrix(df[,-1])
#inq <- m %*% t(scores)
scores
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#solo para comparar y para fines graficos
z <- princomp(df,cor = T)
summary(z, loadings=T)
m <- as.matrix(df)
#inq <- m %*% t(scores)
scores
m <- as.matrix(df)
#inq <- m %*% t(scores)
m
m <- as.matrix(df)
inq <- m %*% scores
inq
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
#(ind <- round(100/as.numeric(ind),3))
m <- as.matrix(df)
inq <- m %*% scores
inq
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
aport_var <- function(l)
{
lsum <- sum(l)
l/lsum
}
var <- aport_var(eig$values)
var2 <- eig$values/sum(diag(R))
names(var) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
aport_var <- function(l)
{
lsum <- sum(l)
l/lsum
}
var <- aport_var(eig$values)
var2 <- eig$values/sum(diag(R))
names(var2) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
var <- eig$values/sum(diag(R))
names(var2) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
var <- eig$values/sum(diag(R))
names(var) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
print(var)
fviz_screeplot(z,barfill = "steelblue",barcolor = "steelblue",linecolor = "red",addlabels =TRUE)
fviz_pca_var(z,col.var="contrib")
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
fviz_pca_var(z,col.var="contrib")
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
#df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#solo para comparar y para fines graficos
z <- princomp(df,cor = T)
summary(z, loadings=T)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rgdal', 'factoextra', 'gridExtra','sf', 'ggplot2', 'tmap', 'tmaptools', 'leaflet','dplyr')
lapply(libs, instalar)
options(scipen=999)
# Este chung es para la compu de pablo porque con el codigo de arriba no me cargaba las librerias
library('factoextra')
library('gridExtra')
library('sf')
library('ggplot2')
library('tmap')
library('tmaptools')
library('leaflet')
library('dplyr')
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
#df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#solo para comparar y para fines graficos
z <- princomp(df,cor = T)
summary(z, loadings=T)
(R <- round(cor(df),3))
eig <- eigen(R)
(y <- round(eig$vectors,3))
var <- eig$values/sum(diag(R))
names(var) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
print(var)
fviz_screeplot(z,barfill = "steelblue",barcolor = "steelblue",linecolor = "red",addlabels =TRUE)
fviz_pca_var(z,col.var="contrib")
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rgdal', 'factoextra', 'gridExtra','sf', 'ggplot2', 'tmap', 'tmaptools', 'leaflet','dplyr')
lapply(libs, instalar)
options(scipen=999)
# Este chung es para la compu de pablo porque con el codigo de arriba no me cargaba las librerias
library('factoextra')
library('gridExtra')
library('sf')
library('ggplot2')
library('tmap')
library('tmaptools')
library('leaflet')
library('dplyr')
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#solo para comparar y para fines graficos
z <- princomp(df,cor = T)
summary(z, loadings=T)
(R <- round(cor(df),3))
eig <- eigen(R)
(y <- round(eig$vectors,3))
var <- eig$values/sum(diag(R))
names(var) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
print(var)
fviz_screeplot(z,barfill = "steelblue",barcolor = "steelblue",linecolor = "red",addlabels =TRUE)
fviz_pca_var(z,col.var="contrib")
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
fviz_pca_var(z,col.var="contrib")
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
fviz_pca_ind(z,
col.ind = "ind", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(z,
col.ind = "cos", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(z,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969",  # Individuals color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(z, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
View(df)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rgdal', 'factoextra', 'gridExtra','sf', 'ggplot2', 'tmap', 'tmaptools', 'leaflet','dplyr')
lapply(libs, instalar)
options(scipen=999)
# Este chung es para la compu de pablo porque con el codigo de arriba no me cargaba las librerias
library('factoextra')
library('gridExtra')
library('sf')
library('ggplot2')
library('tmap')
library('tmaptools')
library('leaflet')
library('dplyr')
df<- read.csv('Data/BD.csv')
df[,5:13]<-df[,5:13]/df[,3]
df[,13]<-df[,13]*1000 #Remuneración en miles de pesos
df[,15]<-df[,15]/100
df <- df[,-c(1,2,3,4,8,9,10,12,14,15)]
names(df) <- c("X1","X2","X3","X4","X5","X6") #Todas las variables estan en terminos poblacionales
attr(df$X1, "descripcion") <- "Ingresos Inferiores. "
attr(df$X2, "descripcion") <- "Carencia de Alimentos."
attr(df$X3, "descripcion") <- "Carencia de Salud."
attr(df$X4, "descripcion") <- "Personal medico"
attr(df$X5, "descripcion") <- "Remuneracion (miles de pesos)"
attr(df$X6, "descripcion") <- "Promedio años de escolaridad"
#str(df)
head(df)
#solo para comparar y para fines graficos
z <- princomp(df,cor = T)
summary(z, loadings=T)
(R <- round(cor(df),3))
eig <- eigen(R)
(y <- round(eig$vectors,3))
var <- eig$values/sum(diag(R))
names(var) <- c("l1","l2","l3","l4","l5","l6")
plot(var,type="o",ylab = "Porcentaje de varianza expresada", xlab = "Componente")
print(var)
fviz_screeplot(z,barfill = "steelblue",barcolor = "steelblue",linecolor = "red",addlabels =TRUE)
fviz_pca_var(z,col.var="contrib")
gr1 <- fviz_contrib(z,choice = "var", axes = 1)
gr2 <- fviz_contrib(z,choice = "var", axes = 2)
grid.arrange(gr1, gr2, ncol = 2)
fviz_pca_biplot(z,
col.var = "#2E9FDF", # Variables color
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
scores <- eig$vectors[,1]
ind <- as.matrix(df) %*% scores
ind <- round(100/as.numeric(ind),3)
nomgeo <- c("Álvaro Obregón", "Azcapotzalco", "Benito Juárez", "Coyoacán", "Cuajimalpa de Morelos", "Cuauhtémoc", "Gustavo A. Madero","Iztacalco","Iztapalapa","La Magdalena Contreras", "Miguel Hidalgo", "Milpa Alta", "Tláhuac", "Tlalpan", "Venustiano Carranza", "Xochimilco")
index <- data.frame(nomgeo,ind)
mapa<-st_read('Data/alcaldias/alcaldias.shp',stringsAsFactors=FALSE)
str(mapa)
mapa_datos <- inner_join(mapa,index, by="nomgeo")
str(mapa_datos)
tm_shape(mapa_datos)+
tm_polygons("ind",id="nomgeo",plette="Reds")
tmap_mode("view")
tmap_last()
